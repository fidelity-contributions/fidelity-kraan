name: CI

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths-ignore: ["**.md"]
  pull_request:
    branches: [master]
    paths-ignore: ["**.md"]

jobs:
  lint-and-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Go environment
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - name: Setup dependencies
        run: make setup
      - name: Lint tasks
        run: |
          make validate-versions
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.37.1
          skip-go-installation: true
          args: --timeout=2m
      - name: test
        run: make test

  docker-build:
    needs: lint-and-test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Determine Tag
        run: |
          export VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Prerelease - Build and push
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: kraan/kraan-controller-prerelease:${{ env.VERSION }}-dev
          file: Dockerfile-dev
      - name: Release - Build and push
        if: github.event_name == 'push'
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: kraan/kraan-controller:${{ env.VERSION }}
          file: Dockerfile

  integration-test:
    needs: docker-build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies
        run: make setup
      - uses: engineerd/setup-kind@v0.5.0
      - name: Integration Test
        run: |
          [ "${{ github.event_name }}" == "pull_request" ] && export DOCKER_IMG='kraan-controller-prerelease' || export DOCKER_IMG='kraan-controller'
          [ "${{ github.event_name }}" == "pull_request" ] && export VERSION=$(cat VERSION)-dev || export VERSION=$(cat VERSION)
          export CHART_VERSION=$VERSION
          export REPO=kraan
          kubectl cluster-info

          echo "installing kraan..."
          helm install kraan --set kraan.kraanController.image.name=$DOCKER_IMG --set kraan.kraanController.image.tag=${VERSION} --set kraan.kraanController.resources=null --set gotk.sourceController.resources=null --set gotk.helmController.resources=null --wait --timeout=2m --create-namespace --namespace gotk-system chart || (kubectl describe deploy -n gotk-system && kubectl describe po -n gotk-system && false)

          echo "setting up test..."
          kubectl apply -f ./testdata/namespaces.yaml
          kubectl apply -f ./testdata/addons/addons-source.yaml
          kubectl patch gitrepository addons-config -n gotk-system -p "{\"spec\": {\"ref\": {\"branch\": \"$GITHUB_HEAD_REF\"}}}" --type=merge
          kubectl apply -f ./testdata/addons/addons-repo.yaml
          kubectl apply -f ./testdata/addons/addons.yaml

          echo "waiting 5m for test to pass..."
          kubectl wait al --for=condition=Deployed --all --timeout=5m || (kubectl get po -A && false)
      - name: Orphan Integration Test
        run: |
          echo "setting up test..."
          kubectl apply -f ./testdata/addons-orphan/addons-source.yaml
          kubectl patch gitrepository addons-config -n gotk-system -p "{\"spec\": {\"ref\": {\"branch\": \"$GITHUB_HEAD_REF\"}}}" --type=merge
          kubectl apply -f ./testdata/addons-orphan/addons-repo.yaml
          kubectl apply -f ./testdata/addons-orphan/addons.yaml

          echo "waiting 5m for test to pass..."
          kubectl wait al --for=condition=Deployed --all --timeout=5m || (kubectl get po -A && false)
  helm-publish:
    needs: integration-test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup dependencies
        run: make setup
      - name: Publish Helm Chart
        run: |
          [ "${{ github.event_name }}" == "pull_request" ] && export VERSION=$(cat VERSION)-dev || export VERSION=$(cat VERSION)
          export CHART_VERSION=$VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions"
          make release
